# Membaca data dari CSV
scoreData <- read.csv("1. Introduction/Score.csv", fileEncoding = "UTF-8-BOM")
scoreWeightData <- read.csv("1. Introduction/ScoreWeight.csv", fileEncoding = "UTF-8-BOM")
# Merge data score data dan score weight data
summary = merge(scoreData, scoreWeightData, by = "Course.Code")
# Mencari total score
summary$Total.Score <- round(
(summary$Assignment.x * summary$Assignment.y) +
(summary$Mid.Exam.x * summary$Mid.Exam.y) +
(summary$Final.Exam.x * summary$Final.Exam.y)
)
# Membuat function untuk mengembalikan grade
getGrade <- function(score){
if(score >= 90 & score <= 100)
return ("A")
else if(score >= 86 & score <= 90)
return ("A-")
else if(score >= 81 & score <= 85)
return ("B+")
else if(score >= 76 & score <= 80)
return ("B")
else if(score >= 71 & score <= 75)
return ("B-")
else if(score >= 66 & score <= 70)
return ("C")
else if(score >= 0 & score <= 65)
return ("D")
}
# Menerapkan function getGrade di setiap elemen
summary$Grade = sapply(summary$Total.Score, getGrade)
# Membuat data frame
df <- data.frame(
Course.Code = summary$Course.Code,
Student.Name = summary$Student.Name,
Total.Score = summary$Total.Score,
Grade = summary$Grade
)
# Menyimpan hasil data frame ke dalam Result.csv
write.csv(df, "1. Introduction/Result.csv", row.names = TRUE)
# Membaca data cari CSV
animeData <- read.csv("2. Data Visualization/anime.csv", fileEncoding = "UTF-8-BOM")
# Menghapus baris yang ada missing values
animeData <- na.omit(animeData)
# 1. Berdasarkan source
animeSource = animeData$source
tableSource <- table(animeSource)
# Visualisasi menggunakan pie chart
pie(
tableSource,
main = "Anime grouped by source",
labels = paste(names(tableSource), tableSource)
)
# 2. Berdasarkan status
animeStatus = animeData$status
tableStatus <- table(animeStatus)
pie(
tableStatus,
main = "Anime grouped by status",
labels = paste(names(tableStatus), tableStatus)
)
# 3. Berdasarkan type
animeType = animeData$type
tableType <- table(animeType)
pie(
tableType,
main = "Anime grouped by type",
labels = paste(names(tableType), tableType)
)
# 4. Berdasarkan age rating
animeRating = animeData$rating
tableRating <- table(animeRating)
pie(
tableRating,
main = "Anime grouped by rating",
labels = paste(names(tableRating), tableRating)
)
# 5. Berdasarkan aired from year
animeAiredFromYear = animeData$aired_from_year
tableAiredFromYear <- table(animeAiredFromYear)
plot (
tableAiredFromYear,
main = "Anime grouped by aired from year",
type = "o",
xlab = "Year",
ylab = "Frequency"
)
# Install packages
install.packages("arules")
library("arules")
# Membaca data dari CSV
headerData <- read.csv("3. Data Description and Frequent Pattern Analysis/header.csv", fileEncoding = "UTF-8-BOM")
detailData <- read.csv("3. Data Description and Frequent Pattern Analysis/detail.csv", fileEncoding = "UTF-8-BOM")
itemData <- read.csv("3. Data Description and Frequent Pattern Analysis/items.csv", fileEncoding = "UTF-8-BOM")
# Menghapus baris yang ada missing values
headerData <- na.omit(headerData)
detailData <- na.omit(detailData)
itemData <- na.omit(itemData)
# Merge data
transactionData <- merge(headerData, detailData, by.x = 'header_id', by.y = "transaction_id")
transactionData <- merge(transactionData, itemData, by.x = "item_id", by.y = "id")
transactionData <- split(transactionData$name, transactionData$header_id)
rules <- apriori(
transactionData,
parameter = list
(
support = 0.05,
target = 'frequent itemset'
)
)
inspect(rules)
associationRules <- ruleInduction(rules, confidence = 0.5)
inspect(associationRules)
